from abc import ABC, abstractmethod

class BaseSensor(ABC):
    """
    TÃ¼m sensÃ¶r plugin'leri iÃ§in temel arayÃ¼z (ÅŸablon).
    Her yeni sensÃ¶r tipi bu sÄ±nÄ±fÄ± miras almalÄ± ve soyut metodlarÄ±
    (abstractmethod) kendi mantÄ±ÄŸÄ±na gÃ¶re doldurmalÄ±dÄ±r.
    """
    def __init__(self, config: dict):
        """
        Her sensÃ¶r, veritabanÄ±ndan gelen kendi konfigÃ¼rasyon sÃ¶zlÃ¼ÄŸÃ¼ ile baÅŸlatÄ±lÄ±r.
        
        Args:
            config (dict): VeritabanÄ±ndan gelen ve sensÃ¶rÃ¼n ayarlarÄ±nÄ± iÃ§eren sÃ¶zlÃ¼k.
        """
        self.sensor_id = config.get("id")
        self.name = config.get("name")
        self.type = config.get("type")
        self.config = config
        self.port = None      # Atanacak olan seri port veya I2C adresi
        self.connection = None # GerÃ§ek baÄŸlantÄ± nesnesi (Ã¶rn: serial.Serial)

    @staticmethod
    @abstractmethod
    def check_fingerprint(data_sample: str, config: dict) -> bool:
        """
        Bir seri porttan okunan veri Ã¶rneÄŸinin (data_sample), bu sensÃ¶r tipine
        ait olup olmadÄ±ÄŸÄ±nÄ± kontrol eder. Bu metod, sensÃ¶r keÅŸfi sÄ±rasÄ±nda kullanÄ±lÄ±r.

        Args:
            data_sample (str): Seri porttan okunan birkaÃ§ satÄ±rlÄ±k veri.
            config (dict): SensÃ¶rÃ¼n ayarlarÄ± (Ã¶rn: parmak izi regex'i iÃ§in).
        
        Returns:
            bool: Veri bu sensÃ¶re aitse True, deÄŸilse False.
        """
        raise NotImplementedError

    @abstractmethod
    def connect(self, port: str) -> bool:
        """
        SensorManager tarafÄ±ndan port bulunduktan sonra, sensÃ¶re fiziksel
        baÄŸlantÄ±yÄ± kurar.
        
        Args:
            port (str): BaÄŸlanÄ±lacak olan seri port (Ã¶rn: '/dev/ttyUSB0').

        Returns:
            bool: BaÄŸlantÄ± baÅŸarÄ±lÄ± ise True, deÄŸilse False.
        """
        raise NotImplementedError

    @abstractmethod
    def read(self):
        """
        SensÃ¶rden anlÄ±k veriyi okur.

        Returns:
            Veri (float, tuple, vb.) veya okuma baÅŸarÄ±sÄ±z olursa None.
        """
        raise NotImplementedError
        
    def disconnect(self):
        """SensÃ¶rle olan baÄŸlantÄ±yÄ± gÃ¼venli bir ÅŸekilde kapatÄ±r."""
        if hasattr(self.connection, 'close') and self.connection.is_open:
            self.connection.close()
            print(f"ğŸ”Œ {self.name} baÄŸlantÄ±sÄ± kapatÄ±ldÄ±.")